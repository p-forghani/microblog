from datetime import datetime, timezone

import sqlalchemy as sa
from flask import (current_app, flash, g, redirect, render_template, request,
                   url_for)
from flask_babel import get_locale
from flask_login import current_user, login_required
from langdetect import LangDetectException, detect

from app import db
from app.main import bp
from app.main.forms import EditProfileForm, EmptyForm, PostForm
from app.models import Post, User
from app.translate_service import translate


@bp.before_request
def before_request():
    if current_user.is_authenticated:
        current_user.last_seen = datetime.now(timezone.utc)
        # when you reference current_user, Flask-Login will invoke the user
        # loader callback function, which will run a database query that will
        # put the target user in the database session.
        db.session.commit()
        g.locale = str(get_locale())


@bp.route('/', methods=['GET', 'POST'])
@bp.route('/index', methods=['GET', 'POST'])
@login_required
def index():
    form = PostForm()
    # if it is a POST request
    if form.validate_on_submit():
        # Detect post language
        try:
            language = detect(form.post.data)
        except LangDetectException:
            language = ''
        # Construct the post object
        post = Post(body=form.post.data, author=current_user,
                    language=language)
        db.session.add(post)
        db.session.commit()
        flash("Your post is sent")
        # It is a standard practice to always respond to a POST request
        # generated by a web form submission with a redirect. This simple
        # trick is called the Post/Redirect/Get pattern. It avoids inserting
        # duplicate posts when a user inadvertently refreshes the page after
        # submitting a web form.
        return redirect(url_for('main.index'))
    # if it is a GET request
    # You may use the `posts` object with the all() to create a list
    # posts = db.session.scalars(current_user.following_posts())
    page = request.args.get('page', 1, type=int)
    posts = db.paginate(
        current_user.following_posts(), page=page,
        per_page=current_app.config['POSTS_PER_PAGE'], error_out=False
    )
    # You can add any keyword arguments to <url_for()>, and if the names of
    # those arguments are not part of the URL that is defined for the route,
    # then Flask will include them as query arguments.
    if posts.has_next:
        next_url = url_for('main.index', page=posts.next_num)
    else:
        next_url = None
    # This implementation method is to recall your python skills.
    prev_url = url_for('main.index', page=posts.prev_num) if posts.has_prev \
        else None
    return render_template('index.html', title='Home', posts=posts.items,
                           form=form, prev_url=prev_url,
                           next_url=next_url)


@bp.route('/explore')
@login_required
def explore():
    query = sa.select(Post).order_by(Post.time_stamp.desc())
    page = request.args.get('page', 1, type=int)
    posts = db.paginate(
        query, page=page, per_page=current_app.config['POSTS_PER_PAGE'],
        error_out=False
    )
    next_url = url_for('main.explore', page=posts.next_num) \
        if posts.has_next else None
    prev_url = url_for('main.explore', page=posts.prev_num) \
        if posts.has_prev else None
    return render_template('index.html', title='Explore', posts=posts.items,
                           next_url=next_url, prev_url=prev_url)


@bp.route('/user/<username>')
@login_required
def user(username):
    user = db.first_or_404(sa.select(User).where(
        User.username == username))
    page = request.args.get('page', 1, type=int)
    # user.posts relationship is defined as a write-only relationship,
    # so the attribute has a select() method.
    query = user.posts.select().order_by(Post.time_stamp.desc())
    posts = db.paginate(query, page=page,
                        per_page=current_app.config['POSTS_PER_PAGE'],
                        error_out=False)
    next_url = url_for(
        'main.user', username=user.username, page=posts.next_num) \
        if posts.has_next else None
    prev_url = url_for(
        'main.user', username=user.username, page=posts.prev_num) \
        if posts.has_prev else None
    form = EmptyForm()
    return render_template('user.html', user=user, posts=posts.items,
                           form=form, next_url=next_url, prev_url=prev_url)


@bp.route("/user/edit_profile", methods=['GET', 'POST'])
@login_required
def edit_profile():
    # Construct the form object
    form = EditProfileForm(current_user.username)
    # Check if it is post request
    if form.validate_on_submit():
        # Update the db
        if form.username.data != '':
            current_user.username = form.username.data
        if form.about_me.data != '':
            current_user.about_me = form.about_me.data
        db.session.commit()
        flash("Your changes are made")
        return redirect(url_for('main.edit_profile'))
    # return pre-filled form
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.about_me.data = current_user.about_me
    return render_template('edit_profile.html', form=form)


@bp.route("/follow/<username>", methods=['POST'])
@login_required
def follow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = db.session.scalar(
            sa.select(User).where(User.username == username))
        if user is None:
            flash(f"Username {username} not found")
            return redirect(url_for('main.index'))
        if user == current_user:
            flash("You can not follow yourself")
            return redirect(url_for('main.index'))
        current_user.follow(user)
        db.session.commit()
        flash(f"You followed {username}")
        return redirect(url_for('main.user', username=username))
    else:
        return redirect(url_for('main.index'))


@bp.route('/unfollow/<username>', methods=['POST'])
@login_required
def unfollow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = db.session.scalar(sa.select(User).where(
            User.username == username))
        if user is None:
            flash(f"Username {username} not found")
            return redirect(url_for('main.index'))
        if user == current_user:
            flash("You can not unfollow yourself")
            return redirect(url_for('main.index'))
        current_user.unfollow(user)
        db.session.commit()
        flash(f"You are not following {username}")
        return redirect(url_for('main.index'))
    else:
        return redirect(url_for('main.index'))


@bp.route('/translate', methods=['POST'])
def translate_text() -> dict:
    data = request.get_json()
    current_app.logger.info(data)
    return {'text': translate(data['text'], data['source_lang'],
                              data['dest_lang'])}
